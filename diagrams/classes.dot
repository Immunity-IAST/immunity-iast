digraph "classes" {
rankdir=BT
charset="utf-8"
"backend.agent.apps.AgentConfig" [color="black", fontcolor="black", label=<{AgentConfig|default_auto_field : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backend.engine.plugins.base.BasePlugin" [color="black", fontcolor="black", label=<{BasePlugin|description : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|<I>run</I>(context_id: int, data: Dict[str, Any]): List[Dict[str, Any]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.core.command.Command" [color="black", fontcolor="black", label=<{Command|data : dict<br ALIGN="LEFT"/>entity_id : Optional[int]<br ALIGN="LEFT"/>foreign_keys : dict<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>|__init__(model: models.Model, entity_id: Optional[int], data: dict, foreign_keys: dict)<br ALIGN="LEFT"/>_resolve_foreign_keys()<br ALIGN="LEFT"/>create()<br ALIGN="LEFT"/>delete()<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.core.management.commands.init_users.Command" [color="black", fontcolor="black", label=<{Command|<br ALIGN="LEFT"/>|handle()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.engine.plugins.cwe77_cmd_exec_plugin.CommandInjectionPlugin" [color="black", fontcolor="black", label=<{CommandInjectionPlugin|description : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|run(context_id: int, data: Dict[str, Any]): List[Dict[str, Any]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.core.models.contexts.Context" [color="black", fontcolor="black", label=<{Context|created_at<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>vulnerable<br ALIGN="LEFT"/>|__str__()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.users.views.context.ContextAPIView" [color="black", fontcolor="black", label=<{ContextAPIView|<br ALIGN="LEFT"/>|filter(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.agent.views.ContextAPIViewset" [color="black", fontcolor="black", label=<{ContextAPIViewset|permission_classes : list<br ALIGN="LEFT"/>|post(request): Response<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.core.admin.contexts.ContextAdmin" [color="black", fontcolor="black", label=<{ContextAdmin|list_display : tuple<br ALIGN="LEFT"/>list_display_links : tuple<br ALIGN="LEFT"/>search_fields : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backend.engine.handler.ContextHandler" [color="black", fontcolor="black", label=<{ContextHandler|<br ALIGN="LEFT"/>|handle(context_object: Dict[str, Any]): Dict[str, Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.agent.views.ContextSerializer" [color="black", fontcolor="black", label=<{ContextSerializer|control_flow<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>request<br ALIGN="LEFT"/>response<br ALIGN="LEFT"/>|validate_control_flow(value)<br ALIGN="LEFT"/>validate_project(value)<br ALIGN="LEFT"/>validate_request(value)<br ALIGN="LEFT"/>validate_response(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.core.apps.CoreConfig" [color="black", fontcolor="black", label=<{CoreConfig|default_auto_field : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|ready()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.users.serializers.CurrentUserSerializer" [color="black", fontcolor="black", label=<{CurrentUserSerializer|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backend.users.views.dataset_label.DatasetAPIView" [color="black", fontcolor="black", label=<{DatasetAPIView|<br ALIGN="LEFT"/>|filter(request)<br ALIGN="LEFT"/>post(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.core.models.dataset_labels.DatasetLabel" [color="black", fontcolor="black", label=<{DatasetLabel|created_at<br ALIGN="LEFT"/>label<br ALIGN="LEFT"/>text<br ALIGN="LEFT"/>|__str__()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.core.admin.dataset_labels.DatasetLabelAdmin" [color="black", fontcolor="black", label=<{DatasetLabelAdmin|list_display : tuple<br ALIGN="LEFT"/>list_display_links : tuple<br ALIGN="LEFT"/>list_filter : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backend.engine.apps.EngineConfig" [color="black", fontcolor="black", label=<{EngineConfig|default_auto_field : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backend.core.models.events.Event" [color="black", fontcolor="black", label=<{Event|args<br ALIGN="LEFT"/>code<br ALIGN="LEFT"/>context<br ALIGN="LEFT"/>created_at<br ALIGN="LEFT"/>exception_message<br ALIGN="LEFT"/>exception_type<br ALIGN="LEFT"/>external_call<br ALIGN="LEFT"/>filename<br ALIGN="LEFT"/>func_name<br ALIGN="LEFT"/>line<br ALIGN="LEFT"/>module<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>timestamp<br ALIGN="LEFT"/>type<br ALIGN="LEFT"/>|__str__()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.core.admin.events.EventAdmin" [color="black", fontcolor="black", label=<{EventAdmin|list_display : tuple<br ALIGN="LEFT"/>list_display_links : tuple<br ALIGN="LEFT"/>list_filter : tuple<br ALIGN="LEFT"/>search_fields : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backend.engine.engine.IASTEngine" [color="black", fontcolor="black", label=<{IASTEngine|plugins : list<br ALIGN="LEFT"/>|__init__()<br ALIGN="LEFT"/>load_plugins(): List<br ALIGN="LEFT"/>run_analysis(project: int, context: int, data: Dict[str, Any])<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.users.views.dataset_label.MarkupSerializer" [color="black", fontcolor="black", label=<{MarkupSerializer|file<br ALIGN="LEFT"/>label<br ALIGN="LEFT"/>line<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backend.core.models.requests.Request.Meta" [color="black", fontcolor="black", label=<{Meta|ordering : list<br ALIGN="LEFT"/>verbose_name : str<br ALIGN="LEFT"/>verbose_name_plural : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backend.core.models.events.Event.Meta" [color="black", fontcolor="black", label=<{Meta|ordering : list<br ALIGN="LEFT"/>verbose_name : str<br ALIGN="LEFT"/>verbose_name_plural : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backend.core.models.dataset_labels.DatasetLabel.Meta" [color="black", fontcolor="black", label=<{Meta|ordering : list<br ALIGN="LEFT"/>verbose_name : str<br ALIGN="LEFT"/>verbose_name_plural : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backend.core.models.vulnerabilities.Vulnerability.Meta" [color="black", fontcolor="black", label=<{Meta|ordering : list<br ALIGN="LEFT"/>verbose_name : str<br ALIGN="LEFT"/>verbose_name_plural : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backend.core.models.contexts.Context.Meta" [color="black", fontcolor="black", label=<{Meta|ordering : list<br ALIGN="LEFT"/>verbose_name : str<br ALIGN="LEFT"/>verbose_name_plural : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backend.core.models.users.User.Meta" [color="black", fontcolor="black", label=<{Meta|ordering : list<br ALIGN="LEFT"/>verbose_name : str<br ALIGN="LEFT"/>verbose_name_plural : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backend.core.models.projects.Project.Meta" [color="black", fontcolor="black", label=<{Meta|ordering : list<br ALIGN="LEFT"/>verbose_name : str<br ALIGN="LEFT"/>verbose_name_plural : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backend.core.models.responses.Response.Meta" [color="black", fontcolor="black", label=<{Meta|ordering : list<br ALIGN="LEFT"/>verbose_name : str<br ALIGN="LEFT"/>verbose_name_plural : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backend.users.serializers.UserCreateSerializer.Meta" [color="black", fontcolor="black", label=<{Meta|fields : tuple<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backend.users.serializers.CurrentUserSerializer.Meta" [color="black", fontcolor="black", label=<{Meta|fields : tuple<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backend.core.migrations.0001_initial.Migration" [color="black", fontcolor="black", label=<{Migration|dependencies : list<br ALIGN="LEFT"/>initial : bool<br ALIGN="LEFT"/>operations : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backend.core.models.projects.Project" [color="black", fontcolor="black", label=<{Project|created_at<br ALIGN="LEFT"/>description<br ALIGN="LEFT"/>language<br ALIGN="LEFT"/>last_online<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|__str__()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.users.views.project.ProjectAPIView" [color="black", fontcolor="black", label=<{ProjectAPIView|<br ALIGN="LEFT"/>|delete(request, pk)<br ALIGN="LEFT"/>filter(request)<br ALIGN="LEFT"/>get(request)<br ALIGN="LEFT"/>post(request)<br ALIGN="LEFT"/>put(request, pk)<br ALIGN="LEFT"/>retrieve(request, pk)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.core.admin.projects.ProjectAdmin" [color="black", fontcolor="black", label=<{ProjectAdmin|list_display : tuple<br ALIGN="LEFT"/>list_display_links : tuple<br ALIGN="LEFT"/>list_filter : tuple<br ALIGN="LEFT"/>search_fields : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backend.users.views.project.ProjectSerializer" [color="black", fontcolor="black", label=<{ProjectSerializer|description<br ALIGN="LEFT"/>language<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backend.core.query.Query" [color="black", fontcolor="black", label=<{Query|model<br ALIGN="LEFT"/>|__init__(model)<br ALIGN="LEFT"/>all(order_by: Optional[List[str]]): Result<br ALIGN="LEFT"/>convert_queryset_to_list(queryset: List[Any]): List[Dict[str, Any]]<br ALIGN="LEFT"/>filter(filters: Optional[Dict[str, Any]], order_by: Optional[List[str]], pagination: Optional[Dict[str, int]]): Result<br ALIGN="LEFT"/>get_by_id(entity_id: Any): Result<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.core.models.requests.Request" [color="black", fontcolor="black", label=<{Request|body<br ALIGN="LEFT"/>context<br ALIGN="LEFT"/>cookies<br ALIGN="LEFT"/>created_at<br ALIGN="LEFT"/>files<br ALIGN="LEFT"/>get_params<br ALIGN="LEFT"/>headers<br ALIGN="LEFT"/>meta<br ALIGN="LEFT"/>method<br ALIGN="LEFT"/>path<br ALIGN="LEFT"/>post_params<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>|__str__()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.core.admin.requests.RequestAdmin" [color="black", fontcolor="black", label=<{RequestAdmin|list_display : tuple<br ALIGN="LEFT"/>list_display_links : tuple<br ALIGN="LEFT"/>list_filter : tuple<br ALIGN="LEFT"/>search_fields : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backend.core.models.responses.Response" [color="black", fontcolor="black", label=<{Response|body<br ALIGN="LEFT"/>charset<br ALIGN="LEFT"/>content_length<br ALIGN="LEFT"/>content_type<br ALIGN="LEFT"/>context<br ALIGN="LEFT"/>cookies<br ALIGN="LEFT"/>created_at<br ALIGN="LEFT"/>headers<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>reason_phrase<br ALIGN="LEFT"/>status_code<br ALIGN="LEFT"/>streaming<br ALIGN="LEFT"/>version<br ALIGN="LEFT"/>|__str__()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.core.admin.responses.ResponseAdmin" [color="black", fontcolor="black", label=<{ResponseAdmin|list_display : tuple<br ALIGN="LEFT"/>list_display_links : tuple<br ALIGN="LEFT"/>list_filter : tuple<br ALIGN="LEFT"/>search_fields : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backend.core.result.Result" [color="black", fontcolor="black", label=<{Result|data : List[Any], Union[Dict, List], dict, list<br ALIGN="LEFT"/>errors : List[str], list<br ALIGN="LEFT"/>is_success : bool<br ALIGN="LEFT"/>meta : Dict[str, Any], dict<br ALIGN="LEFT"/>|__init__(source: Optional[Any]): None<br ALIGN="LEFT"/>_adapt_source(source: Any): None<br ALIGN="LEFT"/>_from_dict(source: Dict[str, Any]): None<br ALIGN="LEFT"/>_from_exception(source: Exception): None<br ALIGN="LEFT"/>_from_list(source: List[Any]): None<br ALIGN="LEFT"/>_from_queryset(source: Any): None<br ALIGN="LEFT"/>failure(errors: Union[str, List[str]], meta: Optional[Dict[str, Any]]): 'Result'<br ALIGN="LEFT"/>success(data: Optional[Any], meta: Optional[Dict[str, Any]]): 'Result'<br ALIGN="LEFT"/>to_dict(): Dict[str, Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.conf.urls.SPAView" [color="black", fontcolor="black", label=<{SPAView|<br ALIGN="LEFT"/>|get(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.core.models.users.User" [color="black", fontcolor="black", label=<{User|groups<br ALIGN="LEFT"/>objects<br ALIGN="LEFT"/>role<br ALIGN="LEFT"/>user_permissions<br ALIGN="LEFT"/>|__str__()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.core.admin.users.UserAdmin" [color="black", fontcolor="black", label=<{UserAdmin|list_display : tuple<br ALIGN="LEFT"/>list_display_links : tuple<br ALIGN="LEFT"/>list_editable : tuple<br ALIGN="LEFT"/>list_filter : tuple<br ALIGN="LEFT"/>search_fields : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backend.users.serializers.UserCreateSerializer" [color="black", fontcolor="black", label=<{UserCreateSerializer|<br ALIGN="LEFT"/>|create(validated_data: Dict[str, Any]): User<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.core.models.users.UserManager" [color="black", fontcolor="black", label=<{UserManager|<br ALIGN="LEFT"/>|create_superuser(email, password)<br ALIGN="LEFT"/>create_user(email, password)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.users.apps.UsersConfig" [color="black", fontcolor="black", label=<{UsersConfig|default_auto_field : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backend.core.models.vulnerabilities.Vulnerability" [color="black", fontcolor="black", label=<{Vulnerability|context<br ALIGN="LEFT"/>cwe<br ALIGN="LEFT"/>description<br ALIGN="LEFT"/>detected_at<br ALIGN="LEFT"/>evidence<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>type<br ALIGN="LEFT"/>|__str__()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.users.views.vulnerability.VulnerabilityAPIView" [color="black", fontcolor="black", label=<{VulnerabilityAPIView|<br ALIGN="LEFT"/>|filter(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backend.core.admin.vulnerabilities.VulnerabilityAdmin" [color="black", fontcolor="black", label=<{VulnerabilityAdmin|list_display : tuple<br ALIGN="LEFT"/>list_display_links : tuple<br ALIGN="LEFT"/>list_filter : tuple<br ALIGN="LEFT"/>search_fields : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backend.core.models.users.UserManager" -> "backend.core.models.users.User" [arrowhead="diamond", arrowtail="none", fontcolor="black", label="objects", style="solid"];
}
