"""
API эндпоинты для проектов.
"""

import logging

from drf_spectacular.types import OpenApiTypes
from drf_spectacular.utils import OpenApiParameter, OpenApiResponse, extend_schema
from rest_framework import serializers, viewsets
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response

from core.command import Command
from core.models import Context, Project, Vulnerability
from core.query import Query
from core.result import Result

logger = logging.getLogger(__name__)


class VulnerabilityAPIView(viewsets.ViewSet):
    """
    API для работы с уязвимостями.
    """

    # permission_classes = [IsAuthenticated]

    @extend_schema(
        parameters=[
            OpenApiParameter(
                name="project",
                type=OpenApiTypes.INT,
                location=OpenApiParameter.QUERY,
                description="По id проекта",
            ),
            OpenApiParameter(
                name="context",
                type=OpenApiTypes.INT,
                location=OpenApiParameter.QUERY,
                description="По id контекста",
            ),
            OpenApiParameter(
                name="cwe",
                type=OpenApiTypes.STR,
                location=OpenApiParameter.QUERY,
                description="Поиск по коду CWE (Пример: CWE-***)",
            ),
            OpenApiParameter(
                name="page",
                type=OpenApiTypes.INT,
                location=OpenApiParameter.QUERY,
                description="Страница пагинации",
            ),
            OpenApiParameter(
                name="page_size",
                type=OpenApiTypes.INT,
                location=OpenApiParameter.QUERY,
                description="Количество объектов на странице пагинации",
            ),
        ],
        tags=["vulnerability"],
    )
    def filter(self, request):
        """Фильтрация объектов."""
        try:

            filters = {
                "project": request.GET.get("project"),
                "context": request.GET.get("context"),
                "cwe": request.GET.get("cwe"),
                "page": request.GET.get("page"),
                "page_size": request.GET.get("page_size"),
            }

            query = Query(model=Vulnerability)
            result = query.filter(
                filters={
                    "project__id": filters["project"],
                    "context__id": filters["context"],
                    "cwe": filters["cwe"],
                },
                pagination={
                    "page": int(filters["page"]) if filters["page"] is not None else 1,
                    "page_size": (
                        int(filters["page_size"])
                        if filters["page_size"] is not None
                        else 10
                    ),
                },
            )

            if result.is_success:
                return Response(result.to_dict(), status=200)
            else:
                return Response(result.to_dict(), status=400)

        except Exception as e:
            logger.error(e)
            return Response(Result(e).to_dict(), status=500)
